{"version":3,"sources":["webpack://tea-timer/./src/components/TeaSelector/TeaSelector.tsx","webpack://tea-timer/./src/components/TimerModal/ding.mp3","webpack://tea-timer/./src/components/TimerModal/TimerModal.tsx","webpack://tea-timer/./src/components/TimerModal/TimerModal.module.scss","webpack://tea-timer/./src/pages/index.tsx"],"names":["minutes","num","teaTypes","black","Duration","undefined","fruit","green","herbal","oolong","white","TeaSelector","setTea","selectedTea","Object","keys","map","type","key","name","checked","onChange","TimerModal","ding","Audio","state","remaining","componentDidMount","this","setState","props","time","toMillis","startTimer","console","log","componentWillUnmount","timer","clearInterval","setInterval","play","render","className","onClick","closeModal","toFormat","React","Index","modalVisible"],"mappings":"sLAGA,SAASA,EAAQC,GACf,OAAa,GAANA,EAAW,IAGb,IAAMC,EAAW,CACtBC,MAAOC,gBAAoBJ,EAAQ,UAAMK,GACzCC,MAAOF,gBAAoBJ,EAAQ,QAAIK,GACvCE,MAAOH,gBAAoBJ,EAAQ,UAAMK,GACzCG,OAAQJ,gBAAoBJ,EAAQ,QAAIK,GACxCI,OAAQL,gBAAoBJ,EAAQ,UAAMK,GAC1CK,MAAON,gBAAoBJ,EAAQ,UAAMK,IAG5B,SAASM,EAAT,GAA8C,IAAvBC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,YAC5C,OACE,0BACGC,OAAOC,KAAKb,GAAUc,KAAI,SAACC,GAAD,OACzB,0BACE,yBAAOC,IAAKD,GACV,yBACEC,IAAKD,EACLA,KAAK,QACLE,KAAK,WACLC,QAASP,IAAgBI,EACzBI,SAAU,WACRT,EAAOK,MAER,IACFA,QC/Bb,MAAe,IAA0B,mDCYpBK,E,oJAEnBC,KAAO,IAAIC,MAAMD,G,EAEjBE,MAAQ,CACNC,UAAW,G,0CAGbC,kBAAA,WACEC,KAAKC,SAAS,CACZH,UAAWtB,gBAAoBwB,KAAKE,MAAMC,KAAKC,gBAAY3B,KAE7DuB,KAAKK,aACLC,QAAQC,IAAIZ,I,EAGda,qBAAA,WACMR,KAAKS,OAAOC,cAAcV,KAAKS,Q,EAGrCJ,WAAA,WAAa,WACXL,KAAKS,MAAQE,aAAY,WACM,IAAzB,EAAKd,MAAMC,UACb,EAAKG,SAAS,CAAEH,UAAW,EAAKD,MAAMC,UAAY,OAElDY,cAAc,EAAKD,OACnB,EAAKd,KAAKiB,UAEX,M,EAGLC,OAAA,WAAS,WACP,OACE,uBAAKC,UC5Ca,qCD4CeC,QAASf,KAAKE,MAAMc,YAArD,YACY,IACV,uBAAKF,UC7CQ,mCD6Cb,aACa,IACVtC,gBAAoBwB,KAAKH,MAAMC,eAAWrB,GAAWwC,SACpD,QAEF,0BACEF,QAAS,WACP,EAAKpB,KAAKiB,SAFd,W,GAxC8BM,aELnBC,E,oJACnBtB,MAAQ,CACNR,KAAM,QACN+B,cAAc,G,EAGhBpC,OAAS,SAACK,GACRiB,QAAQC,IAAI,qBAAsBlB,GAClC,EAAKY,SAAS,CAAEZ,U,EAGlBgB,WAAa,WACX,EAAKJ,SAAS,CAAEmB,cAAc,K,EAGhCJ,WAAa,WACX,EAAKf,SAAS,CAAEmB,cAAc,K,iCAGhCP,OAAA,WACE,OACE,4BACE,uCACA,sDACA,gBAAC9B,EAAD,CAAaC,OAAQgB,KAAKhB,OAAQC,YAAae,KAAKH,MAAMR,OAC1D,2CACA,yBAAIf,EAAS0B,KAAKH,MAAMR,MAAM4B,SAAS,SACvC,0BAAQF,QAASf,KAAKK,YAAtB,OACCL,KAAKH,MAAMuB,cACV,gBAAC1B,EAAD,CACES,KAAM7B,EAAS0B,KAAKH,MAAMR,MAC1B2B,WAAYhB,KAAKgB,e,GA/BME","file":"component---src-pages-index-tsx-e15fed4a6539a7ce613b.js","sourcesContent":["import React from \"react\";\nimport { Duration } from \"luxon\";\n\nfunction minutes(num) {\n  return num * 60 * 1000;\n}\n\nexport const teaTypes = {\n  black: Duration.fromMillis(minutes(2.5), undefined),\n  fruit: Duration.fromMillis(minutes(8), undefined),\n  green: Duration.fromMillis(minutes(1.5), undefined),\n  herbal: Duration.fromMillis(minutes(5), undefined),\n  oolong: Duration.fromMillis(minutes(2.5), undefined),\n  white: Duration.fromMillis(minutes(1.5), undefined),\n};\n\nexport default function TeaSelector({ setTea, selectedTea }) {\n  return (\n    <ul>\n      {Object.keys(teaTypes).map((type) => (\n        <li>\n          <label key={type}>\n            <input\n              key={type}\n              type=\"radio\"\n              name=\"tea-type\"\n              checked={selectedTea === type}\n              onChange={() => {\n                setTea(type);\n              }}\n            />{\" \"}\n            {type}\n          </label>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","export default __webpack_public_path__ + \"static/ding-c051cb722dda7a367cec63cc0a3ca8cb.mp3\";","import React, { MouseEventHandler } from \"react\";\nimport { Duration } from \"luxon\";\n\nimport * as styles from \"./TimerModal.module.scss\";\n\nimport ding from \"./ding.mp3\";\n\ninterface TimerModalProps {\n  time: Duration;\n  closeModal: MouseEventHandler;\n}\n\nexport default class TimerModal extends React.Component<TimerModalProps, {}> {\n  timer: NodeJS.Timeout;\n  ding = new Audio(ding);\n\n  state = {\n    remaining: 0,\n  };\n\n  componentDidMount() {\n    this.setState({\n      remaining: Duration.fromMillis(this.props.time.toMillis(), undefined),\n    });\n    this.startTimer();\n    console.log(ding);\n  }\n\n  componentWillUnmount() {\n    if (this.timer) clearInterval(this.timer);\n  }\n\n  startTimer() {\n    this.timer = setInterval(() => {\n      if (this.state.remaining !== 0) {\n        this.setState({ remaining: this.state.remaining - 1000 });\n      } else {\n        clearInterval(this.timer);\n        this.ding.play();\n      }\n    }, 1000);\n  }\n\n  render() {\n    return (\n      <div className={styles.backdrop} onClick={this.props.closeModal}>\n        container{\" \"}\n        <div className={styles.modal}>\n          countdown:{\" \"}\n          {Duration.fromMillis(this.state.remaining, undefined).toFormat(\n            \"m:ss\"\n          )}\n          <button\n            onClick={() => {\n              this.ding.play();\n            }}\n          >\n            test\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport const backdrop = \"TimerModal-module--backdrop--2ajn0\";\nexport const modal = \"TimerModal-module--modal--RWYhz\";","import React from \"react\";\n\nimport \"./base-styles.scss\";\n\nimport TeaSelector, { teaTypes } from \"../components/TeaSelector/TeaSelector\";\nimport TimerModal from \"../components/TimerModal/TimerModal\";\n\nexport default class Index extends React.Component {\n  state = {\n    type: \"black\",\n    modalVisible: false,\n  };\n\n  setTea = (type) => {\n    console.log(\"Setting tea type: \", type);\n    this.setState({ type });\n  };\n\n  startTimer = () => {\n    this.setState({ modalVisible: true });\n  };\n\n  closeModal = () => {\n    this.setState({ modalVisible: false });\n  };\n\n  render() {\n    return (\n      <main>\n        <h1>Tea Timer</h1>\n        <h2>What kinda tea you want?</h2>\n        <TeaSelector setTea={this.setTea} selectedTea={this.state.type} />\n        <h2>Brewing Time:</h2>\n        <p>{teaTypes[this.state.type].toFormat(\"m:ss\")}</p>\n        <button onClick={this.startTimer}>Go!</button>\n        {this.state.modalVisible && (\n          <TimerModal\n            time={teaTypes[this.state.type]}\n            closeModal={this.closeModal}\n          />\n        )}\n      </main>\n    );\n  }\n}\n"],"sourceRoot":""}